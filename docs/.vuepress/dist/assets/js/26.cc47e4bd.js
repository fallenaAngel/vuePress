(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{327:function(t,a,s){"use strict";s.r(a);var r=s(14),l=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),a("h2",{attrs:{id:"线性表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[t._v("#")]),t._v(" 线性表")]),t._v(" "),a("ul",[a("li",[t._v("栈，后进先出，LIFO\n"),a("ul",[a("li",[t._v("顺序栈：顺序存储，顺序栈使用数组实现，下标为 0 的一端作为栈底，使用 top 做为栈顶，它来指示当前栈顶元素的位置，默认 top = -1 时为空栈。")]),t._v(" "),a("li",[t._v("链栈：链式存储，链栈用单链表实现，一般尾节点为栈底，使用头指针指向的节点作为栈顶，不需要头节点。top = NULL 为空栈。")])])]),t._v(" "),a("li",[t._v("队列，先进先出，FIFO\n"),a("ul",[a("li",[t._v("链队列：链式存储")]),t._v(" "),a("li",[t._v("顺序存储，顺序存储的队列用数组实现。数组下标为 0 的一端为队头，用 head 指向，队尾用 tail 指向。")]),t._v(" "),a("li",[t._v("循环队列：就是队列的队头和队尾相接的顺序存储结构。")])])])]),t._v(" "),a("h2",{attrs:{id:"树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树")]),t._v(" "),a("ul",[a("li",[t._v("二叉树")])]),t._v(" "),a("h2",{attrs:{id:"图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[t._v("#")]),t._v(" 图")])])}),[],!1,null,null,null);a.default=l.exports}}]);